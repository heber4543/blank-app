# -*- coding: utf-8 -*-
"""Proyect.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16y_wdoUx8t9THNtDobpkvrO9tb-NQYmf

________________________________________________________________________________
**UNIVERSIDAD AUTÓNOMA DE CHIHUAHUA**                                           

**MAESTRÍA EN INGENIERÍA EN COMPUTACIÓN**

MACHINE LEARNING PROYECT

By: Heber Abraham Zapata Robles

A linear regression model was implemented on the housing dataset (California), guided by the book: *Hands-On Machine Learning with Scikit-Learn, Keras & TensorFlow: Concepts, Tools, and Techniques to Build Intelligent Systems*.
________________________________________________________________________________

Data extraction:
"""

# importar librerias
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import numpy as np
from sklearn.model_selection import train_test_split, StratifiedShuffleSplit
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import GridSearchCV

import joblib

# cargar datos
ruta = "/workspaces/blank-app/end_to_end/dataset/housing.csv"
housing = pd.read_csv (ruta)
housing = housing.drop(columns="Unnamed: 0")

"""Data exploration:"""

# primeras 5 columans
print(housing.head())

# información del dataset
print(housing.info())

# valores en ocean_proximity
print(housing["ocean_proximity"].value_counts())

# descripcion de atributos numéricos
print(housing.describe())

# histograma de los datos numéricos
housing.hist(bins=50, figsize=(20,15))
plt.show()

# gráfica de dispersión por precios
housing.plot(kind="scatter", x="longitude", y="latitude", alpha=0.4,
s=housing["population"]/100, label="population", figsize=(10,7),
c="median_house_value", cmap=plt.get_cmap("jet"), colorbar=True)
plt.legend()
plt.show()

# correlación, eliminando proximidad al mar
housing_filtered = housing.drop(columns="ocean_proximity")
corr_matrix = housing_filtered.corr()
print(corr_matrix)

# hitmap
plt.figure(figsize=(12, 10))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Matriz de Correlación')
plt.show()

# correlación en función de el valor
print(corr_matrix["median_house_value"].sort_values(ascending=False))

"""Preprocessing data:"""

# particion
housing ["income_cat"] = pd.cut(housing["median_income"],
                                bins=[0., 1.5, 3.0, 4.5, 6., np.inf],
                                labels=[1, 2, 3, 4, 5])

# estratificado
split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
for train_index, test_index in split.split(housing, housing["income_cat"]):
    strat_train_set = housing.loc[train_index]
    strat_test_set = housing.loc[test_index]

strat_test_set["income_cat"].value_counts() / len(strat_test_set)

# eliminar columna income_cat
for set_ in (strat_train_set, strat_test_set):
    set_.drop("income_cat", axis=1, inplace=True)

# dividir en características y target
housing = strat_train_set.drop("median_house_value", axis=1)
housing_labels = strat_train_set["median_house_value"].copy()

# crear nueva columna
housing["bedrooms_per_room"] = housing["total_bedrooms"]/housing["total_rooms"]

# tratado de datos vacios
imputer = SimpleImputer(strategy="median")
housing_num = housing.drop(columns="ocean_proximity", axis=1)
imputer.fit(housing_num)

# aplicar a set de entrenamiento
X = imputer.transform(housing_num)
housing_tr = pd.DataFrame(X, columns=housing_num.columns,
                          index=housing_num.index)

# tratado de danos categóricos
cat_encoder = OneHotEncoder()
housing_cat = housing[["ocean_proximity"]]
housing_cat_1hot = cat_encoder.fit_transform(housing_cat)

"""Custom transformer y pipelines:"""

# transformer
rooms_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6

class CombinedAttributesAdder(BaseEstimator, TransformerMixin):
    def __init__(self, add_bedrooms_per_room=True):
        self.add_bedrooms_per_room = add_bedrooms_per_room

    def fit(self, X, y=None):
        return self

    def transform(self, X):
        if self.add_bedrooms_per_room:
            bedrooms_per_room = X[:, bedrooms_ix] / X[:, rooms_ix]
            return np.c_[X, bedrooms_per_room]
        else:
            return X

# pipelines

# pipeline valores numéricos
num_pipeline = Pipeline([
        ('imputer', SimpleImputer(strategy="median")),
        ('attribs_adder', CombinedAttributesAdder()),
        ('std_scaler', StandardScaler()),
    ])

housing_num_tr = num_pipeline.fit_transform(housing_num)

# full pipeline
num_attribs = list(housing_num)
cat_attribs = ["ocean_proximity"]

full_pipeline = ColumnTransformer([
        ("num", num_pipeline, num_attribs),
        ("cat", OneHotEncoder(), cat_attribs),
    ])

# aplicar a los datos
housing_prepared = full_pipeline.fit_transform(housing)

"""Model:"""

# training
lin_reg = LinearRegression()
lin_reg.fit(housing_prepared, housing_labels)

# evaluacion
housing_predictions = lin_reg.predict(housing_prepared)
lin_mse = mean_squared_error(housing_labels, housing_predictions)
lin_rmse = np.sqrt(lin_mse)
lin_rmse

# fine-tune
param_space = [
        {'copy_X': [True, False],
         'fit_intercept': [True, False],
         'n_jobs': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
         'positive': [True, False],
        }
]

grid_search = GridSearchCV(lin_reg, param_space, cv=5,
                           scoring='neg_mean_squared_error',
                           return_train_score=True)

grid_search.fit(housing_prepared, housing_labels)

# imprimir mejores parametros y score
print(f"Best Hyperparameters: {grid_search.best_params_}")
print(f"Best Score: {grid_search.best_score_}")

# definir el mejor modelo
lin_reg_best = grid_search.best_estimator_

# guardar modelo
joblib.dump(lin_reg_best, 'lin_reg_best.pkl')
# guardar pipeline
joblib.dump(full_pipeline, 'full_pipeline.pkl')